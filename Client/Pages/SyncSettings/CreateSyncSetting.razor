@page "/create-sync-setting/{ProjectId}"

@using Microsoft.AspNetCore.Components.Forms
@using OpenGitSync.Client.Services
@using OpenGitSync.Client.Services.BreadCrumbs
@using OpenGitSync.Client.Shared.Directives
@using OpenGitSync.Shared.DataTransferObjects
@using Microsoft.AspNetCore.Authorization

@inject NavigationManager NavigationManager
@inject ISyncSettingsService SyncSettingsService
@inject IRepositoryService RepositoryService
@inject IProjectService ProjectService
@inject SyncSettingsBreadCrumbService BreadCrumbService

@attribute [Authorize]

<PageTitle>Create Sync Setting</PageTitle>

<h3>Create Sync Setting</h3>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

<EditForm EditContext="editContext" OnValidSubmit="HandleCreateSyncSetting">
        <DataAnnotationsValidator />

        <div class="card mt-4">
            <div class="card-body">
                <h5 class="card-title">Sync Setting Information</h5>

                <div class="form-group">
                    <label for="name">Name</label>
                    <InputText type="text" id="name" class="form-control" placeholder="Enter Sync Setting name" @bind-Value="SyncSetting.Name" />
                    <ValidationMessage For="@(() => SyncSetting.Name)" />
                </div>

                <div class="form-group">
                    <label for="name">Source Repository</label>
                    <RepositoryTypeahead ProjectId="SyncSetting.ProjectId"
                                         @bind-RepositoryId="SyncSetting.SourceRepositoryId"
                                         Placeholder="Search a Source Repository...">
                    </RepositoryTypeahead>
                    <ValidationMessage For="@(() => SyncSetting.SourceRepositoryId)" />
                </div>

                <div class="form-group">
                    <label for="name">Target Repository</label>
                    <RepositoryTypeahead ProjectId="SyncSetting.ProjectId"
                                         @bind-RepositoryId="SyncSetting.TargetRepositoryId"
                                         Placeholder="Search a Target Repository...">
                    </RepositoryTypeahead>
                    <ValidationMessage For="@(() => SyncSetting.TargetRepositoryId)" />
                </div>

                <div class="form-group">
                    <button type="submit" class="btn btn-primary">Create Sync Setting</button>
                </div>
            </div>
        </div>
    </EditForm>

@code {
    private SyncSettingCreateDto SyncSetting { get; set; } = new SyncSettingCreateDto();
    private string ErrorMessage { get; set; }
    [Parameter] public string ProjectId { get; set; }
    [Inject] protected ToastService ToastService { get; set; } = default!;
    private EditContext editContext;
    private string ProjectName;

    private string SourceRepositoryName { get; set; }
    private string TargetRepositoryName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ProjectName = await ProjectService.GetProjectNameById(ProjectId);
        BreadCrumbService.SetNewSyncSettingBreadCrumb(ProjectName, ProjectId);
    }

    protected override void OnInitialized()
    {
        editContext = new EditContext(SyncSetting);
        SyncSetting.ProjectId = long.Parse(ProjectId);
    }

    private async Task HandleCreateSyncSetting()
    {
        // Make an API request to create the Sync Setting
        var (isSuccess, createdSyncSetting) = await SyncSettingsService.CreateSyncSetting(SyncSetting); ;

        if (isSuccess)
        {
            // Sync Setting creation successful, redirect to the Sync Setting details page or perform other actions
            ToastService.Notify(new(ToastType.Success, $"Sync Setting created successfully."));
            NavigationManager.NavigateTo($"/view-sync-setting/{createdSyncSetting.Id}");
        }
        else
        {
            // Handle the Sync Setting creation error, display an error message, or perform other actions
            ToastService.Notify(new(ToastType.Danger, $"Failed to create Sync Setting."));
        }
    }
}
