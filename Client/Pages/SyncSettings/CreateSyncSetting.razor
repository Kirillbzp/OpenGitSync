@page "/create-sync-setting/{ProjectId}"
@using Microsoft.AspNetCore.Components.Forms
@using OpenGitSync.Client.Services
@using OpenGitSync.Shared.DataTransferObjects;
@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize]
@inject NavigationManager NavigationManager
@inject ISyncSettingsService SyncSettingsService
@inject IRepositoryService RepositoryService

<PageTitle>Create Sync Setting</PageTitle>

<h3>Create Sync Setting</h3>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

<EditForm EditContext="editContext" OnValidSubmit="HandleCreateSyncSetting">
        <DataAnnotationsValidator />

        <div class="card mt-4">
            <div class="card-body">
                <h5 class="card-title">Sync Setting Information</h5>

                <div class="form-group">
                    <label for="name">Name</label>
                    <InputText type="text" id="name" class="form-control" placeholder="Enter Sync Setting name" @bind-Value="SyncSetting.Name" />
                    <ValidationMessage For="@(() => SyncSetting.Name)" />
                </div>

                <div class="form-group">
                    <label for="name">Source Repository</label>
                    <AutoComplete @bind-Value="SourceRepositoryName"
                                  TItem="RepositoryDto"
                                  DataProvider="RepositoriesTypeaheadDataProvider"
                                  PropertyName="Name"
                                  Placeholder="Search a Source Repository..."
                                  OnChanged="(RepositoryDto repository) => OnRepositoryChanged(repository, true)" />
                    <ValidationMessage For="@(() => SyncSetting.SourceRepositoryId)" />
                </div>

                <div class="form-group">
                    <label for="name">Target Repository</label>
                    <AutoComplete @bind-Value="TargetRepositoryName"
                                  TItem="RepositoryDto"
                                  DataProvider="RepositoriesTypeaheadDataProvider"
                                  PropertyName="Name"
                                  Placeholder="Search a Target Repository..."
                                  OnChanged="(RepositoryDto repository) => OnRepositoryChanged(repository, false)" />
                    <ValidationMessage For="@(() => SyncSetting.TargetRepositoryId)" />
                </div>

                <div class="form-group">
                    <button type="submit" class="btn btn-primary">Create Sync Setting</button>
                </div>
            </div>
        </div>
    </EditForm>

@code {
    private SyncSettingCreateDto SyncSetting { get; set; } = new SyncSettingCreateDto();
    private string ErrorMessage { get; set; }
    [Parameter] public string ProjectId { get; set; }
    [Inject] protected ToastService ToastService { get; set; } = default!;
    private EditContext editContext;

    private string SourceRepositoryName { get; set; }
    private string TargetRepositoryName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(SyncSetting);
        SyncSetting.ProjectId = long.Parse(ProjectId);
    }

    private async Task<AutoCompleteDataProviderResult<RepositoryDto>> RepositoriesTypeaheadDataProvider(AutoCompleteDataProviderRequest<RepositoryDto> request)
    {
        var repositories = await RepositoryService.RepositoryTypeahead(request.Filter.Value, SyncSetting.ProjectId);

        return await Task.FromResult(new AutoCompleteDataProviderResult<RepositoryDto> { Data = repositories, TotalCount = repositories.Count() });

    }

    private void OnRepositoryChanged(RepositoryDto repository, bool isSource)
    {
        if (repository is null)
        {
            return;
        }
        if (isSource)
        {
            SyncSetting.SourceRepositoryId = repository.Id;
        }
        else
        {
            SyncSetting.TargetRepositoryId = repository.Id;
        }
    }

    private async Task HandleCreateSyncSetting()
    {
        // Make an API request to create the Sync Setting
        var (isSuccess, createdSyncSetting) = await SyncSettingsService.CreateSyncSetting(SyncSetting); ;

        if (isSuccess)
        {
            // Sync Setting creation successful, redirect to the Sync Setting details page or perform other actions
            ToastService.Notify(new(ToastType.Success, $"Sync Setting created successfully."));
            NavigationManager.NavigateTo($"/view-sync-setting/{createdSyncSetting.Id}");
        }
        else
        {
            // Handle the Sync Setting creation error, display an error message, or perform other actions
            ToastService.Notify(new(ToastType.Danger, $"Failed to create Sync Setting."));
        }
    }
}
