@page "/view-sync-setting/{SyncSettingId}"

@using Microsoft.AspNetCore.Components.Forms
@using OpenGitSync.Client.Services
@using OpenGitSync.Client.Services.BreadCrumbs
@using OpenGitSync.Client.Shared.Directives
@using OpenGitSync.Shared.DataTransferObjects
@using Microsoft.AspNetCore.Authorization

@inject NavigationManager NavigationManager
@inject ISyncSettingsService SyncSettingsService
@inject ToastService ToastService
@inject PreloadService PreloadService
@inject SyncSettingsBreadCrumbService BreadCrumbService

@attribute [Authorize]

<PageTitle>@(EditMode ? "Edit" : "View") Sync Setting</PageTitle>

<h3>@(EditMode ? "Edit" : "View") Sync Setting</h3>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

@if (SyncSetting != null)
{
    @if (!EditMode)
    {
        <div class="card mt-4">
            <div class="card-body">
                <h5 class="card-title">Sync Setting Information</h5>

                <div class="form-group">
                    <label for="name">Name</label>
                    <span type="text" id="name" class="form-control">@SyncSetting.Name</span>
                </div>

                <div class="form-group">
                    <label for="name">Source Repository</label>
                    <Repository RepositoryId="@SyncSetting.SourceRepositoryId"></Repository>
                </div>

                <div class="form-group">
                    <label for="name">Target Repository</label>
                    <Repository RepositoryId="@SyncSetting.TargetRepositoryId"></Repository>
                </div>

                <div class="form-group">
                    <button class="btn btn-primary" @onclick="Edit">Edit</button>
                </div>

            </div>
        </div>
    }
    else
    {
        <EditForm EditContext="editContext" OnValidSubmit="HandleUpdateSyncSetting">
            <DataAnnotationsValidator />

            <div class="card mt-4">
                <div class="card-body">
                    <h5 class="card-title">Sync Setting Information</h5>

                    <div class="form-group">
                        <label for="name">Name</label>
                        <InputText type="text" id="name" class="form-control" placeholder="Enter Sync Setting name" @bind-Value="SyncSetting.Name" />
                        <ValidationMessage For="@(() => SyncSetting.Name)" />
                    </div>

                    <div class="form-group">
                        <label for="name">Source Repository</label>
                        <RepositoryTypeahead ProjectId="SyncSetting.ProjectId"
                                             @bind-RepositoryId="SyncSetting.SourceRepositoryId"
                                             Placeholder="Search a Source Repository...">
                        </RepositoryTypeahead>
                        <ValidationMessage For="@(() => SyncSetting.SourceRepositoryId)" />
                    </div>

                    <div class="form-group">
                        <label for="name">Target Repository</label>
                        <RepositoryTypeahead ProjectId="SyncSetting.ProjectId"
                                             @bind-RepositoryId="SyncSetting.TargetRepositoryId"
                                             Placeholder="Search a Target Repository...">
                        </RepositoryTypeahead>
                        <ValidationMessage For="@(() => SyncSetting.TargetRepositoryId)" />
                    </div>

                    <div class="form-group">
                        <button type="submit" class="btn btn-primary">Save changes</button>
                        <button class="btn btn-primary" @onclick="Cancel">Cancel</button>
                    </div>
                </div>
            </div>
        </EditForm>
    }
}

@code {
    [Parameter] public string SyncSettingId { get; set; }

    private SyncSettingDto SyncSetting { get; set; }
    private string ErrorMessage { get; set; }
    private EditContext editContext;
    private bool EditMode { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadSyncSetting();
        editContext = new EditContext(SyncSetting);
    }

    private async Task LoadSyncSetting()
    {
        PreloadService.Show(SpinnerColor.Light, "Loading settings...");

        var response = await SyncSettingsService.GetSyncSettingById(SyncSettingId);

        if (response != null)
        {
            SyncSetting = response;
            BreadCrumbService.SetSyncSetting(SyncSetting.ProjectName, SyncSetting.ProjectId.ToString(), SyncSetting.Name);
        }
        else
        {
            ErrorMessage = "Failed to load Sync Setting information";
        }

        PreloadService.Hide();
    }

    private async Task HandleUpdateSyncSetting()
    {
        // Make an API request to create the Sync Setting
        var isSuccess = await SyncSettingsService.UpdateSyncSetting(SyncSetting.Id, SyncSetting); ;

        if (isSuccess)
        {
            // Sync Setting creation successful, redirect to the Sync Setting details page or perform other actions
            SyncSetting.EndEdit();
            ToastService.Notify(new(ToastType.Success, $"Sync Setting created successfully."));
            EditMode = false;
        }
        else
        {
            // Handle the Sync Setting creation error, display an error message, or perform other actions
            ToastService.Notify(new(ToastType.Danger, $"Failed to create Sync Setting."));
        }
    }

    private void Edit()
    {
        SyncSetting.BeginEdit();
        EditMode = true;
    }

    private void Cancel()
    {
        SyncSetting.CancelEdit();
        EditMode = false;
    }
}
