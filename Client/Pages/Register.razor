@page "/register"
@using OpenGitSync.Client.Services;
@using OpenGitSync.Client.Shared;
@using OpenGitSync.Shared.DataTransferObjects;
@inject NavigationManager NavigationManager
@inject IAuthService AuthService

@layout EmptyLayout

<PageTitle>Register</PageTitle>

<div class="container">
    
    @if (ErrorMessages.Count() > 0)
    {
        @foreach (var message in ErrorMessages)
        {
            <Alert Color="AlertColor.Danger"> <Icon Name="IconName.ExclamationTriangleFill" class="me-2"></Icon>@message</Alert>
        }
    }

    <div class="card mt-4">
        <div class="card-body">
            <h5 class="card-title">Create an Account</h5>

            <div class="form-group row mb-3">
                <label for="username">Username</label>
                <input type="text" id="username" class="form-control" placeholder="Enter your username" @bind="Username" />
            </div>

            <div class="form-group row mb-3">
                <label for="email">Email</label>
                <input type="email" id="email" class="form-control" placeholder="Enter your email" @bind="Email" />
            </div>

            <div class="form-group row mb-3">
                <label for="password">Password</label>
                <input type="password" id="password" class="form-control" placeholder="Enter your password" @bind="Password" />
            </div>

            <div class="form-group row mb-3">
                <label for="confirmPassword">Confirm Password</label>
                <input type="password" id="confirmPassword" class="form-control" placeholder="Confirm your password" @bind="ConfirmPassword" />
            </div>

            <Button Color="ButtonColor.Primary" @onclick="RegisterUser">Register</Button>
            <Button Color="ButtonColor.Primary" @onclick="GoToLogin">Cancel</Button>
        </div>
    </div>
</div>

@code {
    private string Username { get; set; }
    private string Email { get; set; }
    private string Password { get; set; }
    private string ConfirmPassword { get; set; }

    private List<string> ErrorMessages { get; set; }

    protected override void OnInitialized()
    {
        ErrorMessages = new List<string>();
    }

    private void GoToLogin()
    {
        NavigationManager.NavigateTo("/login");
    }

    private async Task RegisterUser()
    {
        // Validate the form inputs
        if (string.IsNullOrWhiteSpace(Username) || string.IsNullOrWhiteSpace(Email) || string.IsNullOrWhiteSpace(Password))
        {
            // Display an error message or handle validation as needed
            return;
        }
        ErrorMessages.Clear();

        var result = await AuthService.RegisterAsync(Username, Email, Password);
        if (result.Success)
        {
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            ErrorMessages = result.Errors.ToList();
        }

    }
}
