@using OpenGitSync.Client.Services
@using OpenGitSync.Shared.DataTransferObjects

@inject NavigationManager NavigationManager
@inject IRepositoryService RepositoryService

<button class="btn btn-primary" @onclick="@( () => NavigationManager.NavigateTo($"/create-repository/{@ProjectId}") )">Create new repository</button>
<br />
<br />

<Grid TItem="RepositoryDto"
      Class="table table-hover table-bordered table-striped"
      DataProvider="RepositoryDataProvider"
      EmptyText="No repository found."
      ItemsPerPageText="Repositories per page"
      PageSizeSelectorItems=@(new int[] { 10, 20, 50 })
      PaginationItemsTextFormat="{0} - {1} of {2} repositories">

    <GridColumn TItem="RepositoryDto" HeaderText="">
        <button class="btn btn-primary" @onclick="@( () => NavigationManager.NavigateTo($"/view-repository/{@context.Id}") )">View</button>
    </GridColumn>
    <GridColumn TItem="RepositoryDto" HeaderText="Name">
        @context.Name
    </GridColumn>
    <GridColumn TItem="RepositoryDto" HeaderText="Url">
        @context.Url
    </GridColumn>

</Grid>

@code {
    [Parameter] public string ProjectId { get; set; }
    private IEnumerable<RepositoryDto> RepositoryList { get; set; }

    private async Task<GridDataProviderResult<RepositoryDto>> RepositoryDataProvider(GridDataProviderRequest<RepositoryDto> request)
    {
        // PreloadService.Show(SpinnerColor.Light, "Loading projects...");

        if (RepositoryList is null)
        {
            // Make an API request to retrieve repositories by project ID
            var response = await RepositoryService.GetProjectRepositories(ProjectId);

            if (response != null)
            {
                RepositoryList = response;
            }
            else
            {
                //ErrorMessage = "Failed to load repositories";
            }
        }

        // PreloadService.Hide();
        return await Task.FromResult(request.ApplyTo(RepositoryList));
    }
}