@page "/view-repository/{RepositoryId}"

@using Microsoft.AspNetCore.Components.Forms
@using OpenGitSync.Client.Services
@using OpenGitSync.Client.Services.BreadCrumbs
@using OpenGitSync.Client.Shared
@using OpenGitSync.Shared.DataTransferObjects
@using Microsoft.AspNetCore.Authorization

@inject NavigationManager NavigationManager
@inject IRepositoryService RepositoryService
@inject ToastService ToastService
@inject PreloadService PreloadService
@inject RepositoriesBreadCrumbService BreadCrumbService

@attribute [Authorize]

<PageTitle>@(EditMode ? "Edit" : "View") Repository</PageTitle>

<h3>@(EditMode ? "Edit" : "View") Repository</h3>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

@if (Repository != null)
{
    @if (!EditMode)
    {
        <div class="card mt-4">
            <div class="card-body">
                <h5 class="card-title">Repository Information</h5>

                <div class="form-group">
                    <label for="name">Name</label>
                    <span type="text" id="name" class="form-control">@Repository.Name</span>
                </div>

                <div class="form-group">
                    <label for="url">Url</label>
                    <span type="text" id="url" class="form-control">@Repository.Url</span>
                </div>

                <div class="form-group">
                    <label for="token">Token</label>
                    <span type="text" id="token" class="form-control">@Repository.Token</span>
                </div>

                <div class="form-group">
                    <button class="btn btn-primary" @onclick="Edit">Edit</button>
                </div>

            </div>
        </div>
    }
    else
    {
        <EditForm EditContext="editContext" OnValidSubmit="HandleUpdateRepository" >
            <DataAnnotationsValidator />

            <div class="card mt-4">
                <div class="card-body">
                    <div class="form-group">
                        <label for="name">Name</label>
                        <InputText type="text" id="name" class="form-control" placeholder="Enter repository name" @bind-Value="Repository.Name" />
                        <ValidationMessage For="@(() => Repository.Name)" />
                    </div>

                    <div class="form-group">
                        <label for="url">URL</label>
                        <InputTextArea id="url" class="form-control" placeholder="Enter repository URL" @bind-Value="Repository.Url"></InputTextArea>
                        <ValidationMessage For="@(() => Repository.Url)" />
                    </div>

                    <div class="form-group">
                        <label for="token">Token</label>
                        <InputTextArea id="token" class="form-control" placeholder="Enter Token" @bind-Value="Repository.Token"></InputTextArea>
                        <ValidationMessage For="@(() => Repository.Token)" />
                    </div>

                    <div class="form-group">
                        <button type="submit" class="btn btn-primary">Save Changes</button>
                        <button class="btn btn-primary" @onclick:preventDefault="true" @onclick="Cancel">Cancel</button>
                        <button id="btncheck" class="btn btn-warning" @onclick:preventDefault="true" @onclick="CheckConnection">Check connection</button>
                    </div>
                </div>
            </div>
        </EditForm>
    }

}

@code {
    [Parameter] public string RepositoryId { get; set; }

    private RepositoryDto Repository { get; set; }
    private string ErrorMessage { get; set; }
    private EditContext editContext;
    private bool EditMode { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadRepository();
        editContext = new EditContext(Repository);
    }

    protected override void OnInitialized()
    {
        // BreadCrumbService.SetBreadCrumb(BreadCrumbType.Project, -1, Repository.ProjectId.ToString());
    }

    private async Task LoadRepository()
    {
        PreloadService.Show(SpinnerColor.Light, "Loading repository...");

        var response = await RepositoryService.GetRepositoryById(RepositoryId);

        if (response != null)
        {
            Repository = response;
            BreadCrumbService.SetRepository(Repository.ProjectName, Repository.ProjectId.ToString(), Repository.Name);
        }
        else
        {
            ErrorMessage = "Failed to load repository information";
        }

        PreloadService.Hide();
    }

    private async Task HandleUpdateRepository()
    {
        ErrorMessage = "";

        if(!editContext.IsModified())
        {
            ToastService.Notify(new(ToastType.Info, $"No changes to put."));
            return;
        }

        // Make an API request to update the repository
        var isSuccess = await RepositoryService.UpdateRepository(Repository.Id, Repository);

        if (isSuccess)
        {
            // Repository update successful, redirect to the repository details page or perform other actions
            Repository.EndEdit();
            ToastService.Notify(new(ToastType.Success, $"Repository details saved successfully."));
            EditMode = false;
        }
        else
        {
            // Handle the repository update error, display an error message, or perform other actions
            ToastService.Notify(new(ToastType.Danger, $"Failed to update repository."));
        }
    }

    private void Edit()
    {
        Repository.BeginEdit();
        EditMode = true;
    }

    private void Cancel()
    {
        Repository.CancelEdit();
        EditMode = false;
    }

    private async Task CheckConnection()
    {
        PreloadService.Show(SpinnerColor.Light, "Checking connection...");

        var isSuccess = await RepositoryService.CheckConnection(Repository.Url, Repository.Token);

        if (isSuccess)
        {
            ToastService.Notify(new(ToastType.Success, $"Connection successful."));
        }
        else
        {
            ToastService.Notify(new(ToastType.Danger, $"Failed to connect to the repository."));
        }

        PreloadService.Hide();
    }
}
